// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("DataAccess.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DataAccess.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1d",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2272),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1e",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2275),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1f",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2275),
                            Name = "Books"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1g",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2276),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1h",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2277),
                            Name = "Toys"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1i",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2278),
                            Name = "Tools"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1j",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2278),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1k",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2279),
                            Name = "Music"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShopId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubcategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.ProductTag", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagValueId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "TagId", "TagValueId");

                    b.HasIndex("TagId");

                    b.HasIndex("TagValueId");

                    b.ToTable("ProductsTags");
                });

            modelBuilder.Entity("DataAccess.Entities.Shop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("DataAccess.Entities.Subcategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1l",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1d",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2326),
                            Name = "Smartphones"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1m",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1d",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2327),
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1n",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1e",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2328),
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1o",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1e",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2329),
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1p",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1f",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2329),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1q",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1f",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2330),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1r",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1g",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2331),
                            Name = "Sofas"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1s",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1g",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2332),
                            Name = "Beds"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1t",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1h",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2332),
                            Name = "Cars"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1u",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1h",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2333),
                            Name = "Dinosaurs"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1v",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1i",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2335),
                            Name = "Drills"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1w",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1i",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2336),
                            Name = "Screwdrivers"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1x",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1j",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2337),
                            Name = "Football"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1y",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1j",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2338),
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1z",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1k",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2339),
                            Name = "Guitars"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e10",
                            CategoryId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1k",
                            CreatedAt = new DateTime(2024, 10, 2, 16, 1, 31, 230, DateTimeKind.Utc).AddTicks(2341),
                            Name = "Drums"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubcategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataAccess.Entities.TagValue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagValues");
                });

            modelBuilder.Entity("DataAccess.Entities.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1c",
                            Name = "Shop",
                            NormalizedName = "SHOP"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f14dd2-167f-4ac2-8215-36d659e20316",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELopeGsayqvpaRP9MCvkFmUhzi4olvpMWzHhdR3tq3V8307d6zA+6b8b7cIyu+cLzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ef3ac37-c65f-4319-b859-86281787b904",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5726645-fdb9-4a5e-ae34-da2ca95c178a",
                            Email = "shop@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHOP@MAIL.COM",
                            NormalizedUserName = "SHOP",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPuHbIlR3k5FAS31EdCoyrXGXJS5Y/FEzfL1DmauegBhSok536CVq45lKypBka4Lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a343bc0-7d4b-4ec1-bef4-d84e7c1e783a",
                            TwoFactorEnabled = false,
                            UserName = "shop"
                        },
                        new
                        {
                            Id = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55278a8f-07e5-4ccc-9ad1-baca91bba382",
                            Email = "user@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmCNw09nj2E4jmXpZKtzRstxDHz8WT3JUP2VmggMGo5A4Q4WV1SQZRG47FgRv5+uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1688127-e345-4ba8-ab3b-a6e74691349a",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1a",
                            RoleId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1b"
                        },
                        new
                        {
                            UserId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1b",
                            RoleId = "f1b0b3f4-3b1b-4b7e-8f1d-3e0b6e1d6e1c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Order", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.Entities.Product", b =>
                {
                    b.HasOne("DataAccess.Entities.Shop", null)
                        .WithMany("Products")
                        .HasForeignKey("ShopId");

                    b.HasOne("DataAccess.Entities.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("DataAccess.Entities.ProductTag", b =>
                {
                    b.HasOne("DataAccess.Entities.Product", "Product")
                        .WithMany("ProductsTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TagValue", "TagValue")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");

                    b.Navigation("TagValue");
                });

            modelBuilder.Entity("DataAccess.Entities.Shop", b =>
                {
                    b.HasOne("DataAccess.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Subcategory", b =>
                {
                    b.HasOne("DataAccess.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.Entities.Tag", b =>
                {
                    b.HasOne("DataAccess.Entities.Subcategory", "Subcategory")
                        .WithMany("Tags")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("DataAccess.Entities.TagValue", b =>
                {
                    b.HasOne("DataAccess.Entities.Tag", "Tag")
                        .WithMany("TagValues")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DataAccess.Entities.Users.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Product", b =>
                {
                    b.Navigation("ProductsTags");
                });

            modelBuilder.Entity("DataAccess.Entities.Shop", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Subcategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DataAccess.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("TagValues");
                });

            modelBuilder.Entity("DataAccess.Entities.TagValue", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("DataAccess.Entities.Users.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
